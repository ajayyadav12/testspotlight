CREATE TABLE T_STATUS 
(
	id INTEGER NOT NULL PRIMARY KEY,
	name varchar(255)
);

CREATE TABLE T_SUB_STATUS 
(
	id INTEGER NOT NULL PRIMARY KEY,
	name varchar(255)
);

CREATE TABLE T_STAGE 
(
	id INTEGER NOT NULL PRIMARY KEY,
	name varchar(255)
);

CREATE TABLE T_PROCESS_TYPE 
(
	id INTEGER NOT NULL PRIMARY KEY,
	name varchar(255)
);

CREATE TABLE T_FEED_TYPE 
(
	id INTEGER NOT NULL PRIMARY KEY,
	name varchar(255)
);

CREATE TABLE T_ROLE
(
	id INTEGER NOT NULL PRIMARY KEY,
	description varchar(255)
);

CREATE TABLE T_USER 
(
	id INTEGER NOT NULL PRIMARY KEY,
	sso INTEGER,
	name varchar(255)
);

CREATE TABLE T_SENDER 
(
	id INTEGER NOT NULL PRIMARY KEY,
	name varchar(255),
	stage_id INTEGER
);

ALTER TABLE T_SENDER ADD FOREIGN KEY (stage_id) REFERENCES T_STAGE (id);

CREATE TABLE T_RECEIVER 
(
	id INTEGER NOT NULL PRIMARY KEY,
	name varchar(255)
);

CREATE TABLE T_PROCESS
(
	id INTEGER NOT NULL PRIMARY KEY,
	name varchar(255),
	sender_id INTEGER,
	receiver_id INTEGER,
	feed_type_id INTEGER,
	process_type_id INTEGER,
	technical_owner_id INTEGER,
	functional_owner_id INTEGER,
	critical_flag CHAR,
	supersession_flag CHAR,
	process_parent_id INTEGER,
	process_level INTEGER,
	is_Parent CHAR
);

ALTER TABLE T_PROCESS ADD FOREIGN KEY (sender_id) REFERENCES T_SENDER (id);
ALTER TABLE T_PROCESS ADD FOREIGN KEY (receiver_id) REFERENCES T_RECEIVER (id);
ALTER TABLE T_PROCESS ADD FOREIGN KEY (feed_type_id) REFERENCES T_FEED_TYPE (id);
ALTER TABLE T_PROCESS ADD FOREIGN KEY (process_type_id) REFERENCES T_PROCESS_TYPE (id);
ALTER TABLE T_PROCESS ADD FOREIGN KEY (technical_owner_id) REFERENCES T_USER (id);
ALTER TABLE T_PROCESS ADD FOREIGN KEY (functional_owner_id) REFERENCES T_USER (id);
ALTER TABLE T_PROCESS ADD FOREIGN KEY (process_parent_id) REFERENCES T_PROCESS (id);

CREATE TABLE T_SUBMISSION 
(
	id INTEGER NOT NULL PRIMARY KEY,
	process_id INTEGER,
	start_time TIMESTAMP,
	end_time TIMESTAMP,
	update_time TIMESTAMP,
	system_start_time TIMESTAMP,
	system_end_time TIMESTAMP,
	system_update_time TIMESTAMP,
	sub_status_id INTEGER,
	rca_description varchar(255),
	records INTEGER DEFAULT 0,
	entities INTEGER,
	forecast_records INTEGER,
	forecast_cycle_time TIMESTAMP,
	warnings INTEGER DEFAULT 0,
	fatal_errors INTEGER DEFAULT 0,
	suspense_lines INTEGER,
	class varchar(255),
	period varchar(255) DEFAULT '',
	period_sequence INTEGER DEFAULT 0,
	acknowledgement_flag CHAR,
	ad_hoc_flag CHAR DEFAULT 'N',
	manual_flag CHAR,
	superseded_flag CHAR,
	reference1 varchar(255),
	reference2 varchar(255),
	reference3 varchar(255),
	comments varchar(255)
);

ALTER TABLE T_SUBMISSION ADD FOREIGN KEY (process_id) REFERENCES T_PROCESS (id);

CREATE TABLE T_PROCESS_STEP 
(
	id INTEGER NOT NULL PRIMARY KEY,
	process_id INTEGER,
	name varchar(255)
);

ALTER TABLE T_PROCESS_STEP ADD FOREIGN KEY (process_id) REFERENCES T_PROCESS (id);
ALTER TABLE T_PROCESS_STEP ADD CONSTRAINT U_PROCESS_STEP UNIQUE (process_id, name);

CREATE TABLE T_SUBMISSION_STEP 
(
	id INTEGER NOT NULL PRIMARY KEY,
	submission_id INTEGER,
	process_step_id INTEGER,
	status_id INTEGER,
	sub_status_id INTEGER,
	start_time TIMESTAMP,
	end_time TIMESTAMP,
	system_start_time TIMESTAMP,
	system_end_time TIMESTAMP
);

ALTER TABLE T_SUBMISSION_STEP ADD FOREIGN KEY (submission_id) REFERENCES T_SUBMISSION (id);
ALTER TABLE T_SUBMISSION_STEP ADD FOREIGN KEY (process_step_id) REFERENCES T_PROCESS_STEP (id);
ALTER TABLE T_SUBMISSION_STEP ADD FOREIGN KEY (status_id) REFERENCES T_STATUS (id);
ALTER TABLE T_SUBMISSION_STEP ADD FOREIGN KEY (sub_status_id) REFERENCES T_SUB_STATUS (id);

 CREATE TABLE T_VIEW 
(
	id INTEGER NOT NULL PRIMARY KEY,
	description INTEGER
);

CREATE TABLE T_USER_ROLE
(
	user_id INTEGER,
	role_id INTEGER
);  

ALTER TABLE T_USER_ROLE ADD FOREIGN KEY (user_id) REFERENCES T_USER (id);
ALTER TABLE T_USER_ROLE ADD FOREIGN KEY (role_id) REFERENCES T_ROLE (id);
ALTER TABLE T_USER_ROLE ADD CONSTRAINT U_USER_ROLE UNIQUE (user_id, role_id);

CREATE TABLE T_USER_VIEW 
(
	id INTEGER NOT NULL PRIMARY KEY,
	user_id INTEGER,
	view_id INTEGER
);

ALTER TABLE T_USER_VIEW ADD FOREIGN KEY (user_id) REFERENCES T_USER (id);
ALTER TABLE T_USER_VIEW ADD FOREIGN KEY (view_id) REFERENCES T_VIEW (id);
 
 CREATE TABLE T_PERMISSION
(
	id INTEGER NOT NULL PRIMARY KEY,
	name varchar(255)
);

CREATE TABLE T_PROCESS_USER 
(
	id INTEGER NOT NULL PRIMARY KEY,
	process_id INTEGER,
	user_id INTEGER
);

ALTER TABLE T_PROCESS_USER ADD FOREIGN KEY (process_id) REFERENCES T_PROCESS (id);
ALTER TABLE T_PROCESS_USER ADD FOREIGN KEY (user_id) REFERENCES T_USER (id);

CREATE TABLE T_PROCESS_USER_PERMISSION 
(
	process_user_id INTEGER,
	permission_id INTEGER
);

ALTER TABLE T_PROCESS_USER_PERMISSION ADD FOREIGN KEY (process_user_id) REFERENCES T_PROCESS_USER (id);
ALTER TABLE T_PROCESS_USER_PERMISSION ADD FOREIGN KEY (permission_id) REFERENCES T_PERMISSION (id);
ALTER TABLE T_PROCESS_USER_PERMISSION ADD CONSTRAINT U_PROCESS_USER_PERMISSION UNIQUE (process_user_id, permission_id);

CREATE TABLE T_NOTIFICATION_TEMPLATE 
(
	id INTEGER NOT NULL PRIMARY KEY,
	name varchar(255),
	subject varchar(255),
	body varchar(4000)
);

CREATE TABLE T_DL_GROUP 
(
	id INTEGER NOT NULL PRIMARY KEY,
	name varchar(255)
);

CREATE TABLE T_DL_GROUP_DTL 
(
	id INTEGER NOT NULL PRIMARY KEY,
	dl_group_id INTEGER,
	name varchar(255),
	email varchar(255)
);

ALTER TABLE T_DL_GROUP_DTL ADD FOREIGN KEY (dl_group_id) REFERENCES T_DL_GROUP (id);

CREATE TABLE T_NOTIFICATION_DEF 
(
	id INTEGER NOT NULL PRIMARY KEY,
	process_id INTEGER,
	process_step_id INTEGER,
	dl_group_id INTEGER,
	template_id INTEGER,
	status_id INTEGER
);

ALTER TABLE T_NOTIFICATION_DEF ADD FOREIGN KEY (status_id) REFERENCES T_STATUS (id);
ALTER TABLE T_NOTIFICATION_DEF ADD FOREIGN KEY (process_id) REFERENCES T_PROCESS (id);
ALTER TABLE T_NOTIFICATION_DEF ADD FOREIGN KEY (process_step_id) REFERENCES T_PROCESS_STEP (id);
ALTER TABLE T_NOTIFICATION_DEF ADD FOREIGN KEY (dl_group_id) REFERENCES T_DL_GROUP (id);
ALTER TABLE T_NOTIFICATION_DEF ADD FOREIGN KEY (template_id) REFERENCES T_NOTIFICATION_TEMPLATE (id);

CREATE TABLE T_NOTIFICATION_LOG 
(
	id INTEGER NOT NULL PRIMARY KEY,
	notification_def_id INTEGER,
	submission_id INTEGER,
	sendTime TIMESTAMP
);

ALTER TABLE T_NOTIFICATION_LOG ADD FOREIGN KEY (notification_def_id) REFERENCES T_NOTIFICATION_DEF (id);
ALTER TABLE T_NOTIFICATION_LOG ADD FOREIGN KEY (submission_id) REFERENCES T_SUBMISSION (id);

CREATE TABLE T_SCHEDULE_DEF 
(
	id INTEGER NOT NULL PRIMARY KEY,
	process_id INTEGER,
	process_workflow_id INTEGER,
	settings VARCHAR(255),
	tolerance INTEGER,
	schedule_change_flag CHAR,
	critical_date TIMESTAMP,
	start_time TIMESTAMP NOT NULL,
	end_time TIMESTAMP NOT NULL,
	schedule_start_date TIMESTAMP NOT NULL,
	schedule_end_date TIMESTAMP NOT NULL,
	recurrence_pattern CHAR DEFAULT 'D' NOT NULL,
	recurrence_time INTEGER DEFAULT 0 NOT NULL 
);

ALTER TABLE T_SCHEDULE_DEF ADD FOREIGN KEY (process_id) REFERENCES T_PROCESS (id);

CREATE TABLE T_SCHEDULE_EXCEPTION 
(
	id INTEGER NOT NULL PRIMARY KEY,
	schedule_id INTEGER
);

ALTER TABLE T_SCHEDULE_EXCEPTION ADD FOREIGN KEY (schedule_id) REFERENCES T_SCHEDULE_DEF (id);

CREATE TABLE T_SUBMISSION_PREDECESSOR 
(
	id INTEGER NOT NULL PRIMARY KEY,
	submission_id INTEGER
);

ALTER TABLE T_SUBMISSION_PREDECESSOR ADD FOREIGN KEY (submission_id) REFERENCES T_SUBMISSION (id);

CREATE TABLE T_ATTACHMENT 
(
	id INTEGER NOT NULL PRIMARY KEY,
	filePath varchar(255)
);

CREATE TABLE T_SCHEDULED_SUBMISSION
(
	id INTEGER NOT NULL PRIMARY KEY,
	schedule_def_id INTEGER,
	process_id INTEGER,
	submission_id INTEGER,
	start_time TIMESTAMP,
	end_time TIMESTAMP,
	tolerance INTEGER,
	notifications INTEGER DEFAULT 0 NOT NULL
);

ALTER TABLE T_SCHEDULED_SUBMISSION ADD FOREIGN KEY (schedule_def_id) REFERENCES T_SCHEDULE_DEF (id);
ALTER TABLE T_SCHEDULED_SUBMISSION ADD FOREIGN KEY (process_id) REFERENCES T_PROCESS (id);
ALTER TABLE T_SCHEDULED_SUBMISSION ADD FOREIGN KEY (submission_id) REFERENCES T_SUBMISSION (id);

CREATE SEQUENCE S_STAGE_ID MINVALUE 1 MAXVALUE 9999999999 START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE S_PROCESS_TYPE_ID MINVALUE 1 MAXVALUE 9999999999 START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE S_FEED_TYPE_ID MINVALUE 1 MAXVALUE 9999999999 START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE S_ROLE_ID MINVALUE 1 MAXVALUE 9999999999 START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE S_USER_ID MINVALUE 1 MAXVALUE 9999999999 START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE S_SENDER_ID MINVALUE 1 MAXVALUE 9999999999 START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE S_RECEIVER_ID MINVALUE 1 MAXVALUE 9999999999 START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE S_PROCESS_ID MINVALUE 1 MAXVALUE 9999999999 START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE S_SUBMISSION_ID MINVALUE 1 MAXVALUE 9999999999 START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE S_PROCESS_STEP_ID MINVALUE 1 MAXVALUE 9999999999 START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE S_SUBMISSION_STEP_ID MINVALUE 1 MAXVALUE 9999999999 START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE S_PROCESS_USER_ID MINVALUE 1 MAXVALUE 9999999999 START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE S_STATUS_ID MINVALUE 1 MAXVALUE 9999999999 START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE S_SCHEDULE_ID MINVALUE 1 MAXVALUE 9999999999 START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE S_DL_GROUP_ID MINVALUE 1 MAXVALUE 9999999999 START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE S_DL_GROUP_DTL_ID MINVALUE 1 MAXVALUE 9999999999 START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE S_NOTIFICATION_TEMPLATE_ID MINVALUE 1 MAXVALUE 9999999999 START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE S_NOTIFICATION_ID MINVALUE 1 MAXVALUE 9999999999 START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE S_SCHEDULED_SUBMISSION_ID MINVALUE 1 MAXVALUE 9999999999 START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;

exit;